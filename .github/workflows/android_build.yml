name: Build Flutter Android APK

on:
  push:
    branches:
      - main # Or your default branch, e.g., master
  pull_request:
    branches:
      - main # Or your default branch
  workflow_dispatch: # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      APP_ID: "io.github.majusss.purevideo" # Ensure this is your actual app ID

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0' # Please verify this Flutter version
          channel: 'stable'
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      # Optional: Clean previous builds if necessary
      # - name: Clean Flutter build
      #   run: flutter clean

      - name: Decode Android Keystore
        id: decode_keystore
        # Only run this step if the secret is available and not empty
        if: ${{ secrets.ANDROID_SIGNING_KEY_STORE_BASE64 != '' }} # <-- CORRECTED LINE
        run: |
          echo "Writing keystore to ${{ runner.temp }}/upload-keystore.jks"
          echo "${{ secrets.ANDROID_SIGNING_KEY_STORE_BASE64 }}" | base64 --decode > "${{ runner.temp }}/upload-keystore.jks"
          echo "STORE_FILE_PATH=${{ runner.temp }}/upload-keystore.jks" >> $GITHUB_OUTPUT
        env:
          ANDROID_SIGNING_KEY_STORE_BASE64: ${{ secrets.ANDROID_SIGNING_KEY_STORE_BASE64 }}

      - name: Build APK
        run: flutter build apk --release
        env:
          # These environment variables will be used by build.gradle.kts if set
          SIGNING_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
          SIGNING_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
          SIGNING_STORE_PASSWORD: ${{ secrets.ANDROID_STORE_PASSWORD }}
          # Use the output from the decode_keystore step
          # Only set this env var if the keystore was decoded (i.e., the secret was present and the step ran)
          SIGNING_STORE_FILE: ${{ steps.decode_keystore.outputs.STORE_FILE_PATH }}

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk
          # If you built a debug APK, the path would be:
          # path: build/app/outputs/flutter-apk/app-debug.apk
          # If you built an appbundle, the path would be:
          # path: build/app/outputs/bundle/release/app-release.aab