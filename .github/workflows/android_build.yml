name: Flutter CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the main branch
  push:
    branches:
      - main

  # Triggers the workflow on pull request events but only for the main branch
  pull_request:
    branches:
      - main

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: Build Flutter APK
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4 # Updated to v4 for latest features/fixes

      # Sets up Java Development Kit
      - name: Set up JDK 17
        uses: actions/setup-java@v4 # Updated to v4
        with:
          distribution: 'temurin' # A common and well-supported distribution
          java-version: '17'

      # Sets up Flutter SDK
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # You can specify a version e.g., '3.19.0'
          # Optional: flutter-version: '3.x.x'
          # Optional: cache: true # Enables caching of Flutter SDK for faster builds

      # Get Flutter dependencies
      - name: Install Flutter dependencies
        run: flutter pub get

      # Optional: Run Flutter tests
      # - name: Run Flutter tests
      #   run: flutter test

      # Build the APK
      - name: Build APK
        run: flutter build apk --release
        # If your Flutter project is in a subdirectory, e.g. 'my_app', use:
        # run: cd my_app && flutter build apk --release

      # Optional: Rename the APK if needed (example)
      # - name: Rename APK
      #   run: |
      #     VERSION=$(grep 'version:' pubspec.yaml | sed 's/version: //') # Example to get version from pubspec.yaml
      #     mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/your-app-name-v$VERSION.apk

      # Upload the built APK
      - name: Upload APK artifact
        uses: actions/upload-artifact@v4 # Updated to v4
        with:
          name: release-apk
          path: build/app/outputs/flutter-apk/app-release.apk # Path to the generated APK
          # Optional: if-no-files-found: error # Fails the step if the APK is not found
          # Optional: retention-days: 90 # How long to keep the artifact